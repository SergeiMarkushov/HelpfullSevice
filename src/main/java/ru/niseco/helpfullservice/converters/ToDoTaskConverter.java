package ru.niseco.helpfullservice.converters;

import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import ru.niseco.helpfullservice.dtos.ToDoTaskDTO;
import ru.niseco.helpfullservice.entities.ToDoTask;
//класс конвертер тут будут храниться конвертации классов
@Component//используется для определения компонента (бина) в приложении.
@RequiredArgsConstructor//автоматически генерирует конструктор для всех final полей класса
public class ToDoTaskConverter {
    private final ModelMapper mapper;
    //Мы инжектим (вставляем ссылку) класс, который потом будем использовать

    public ToDoTask dtoToEntity(ToDoTaskDTO dto) {
        return mapper.map(dto, ToDoTask.class);
    }

    /*
    автоматически скопирует значения этих свойств из объекта dto в объект ToDoTask.
    Этот процесс упрощает перенос данных между объектами разных типов и часто используется
     в приложениях для преобразования DTO в сущности и обратно.
    */

    public ToDoTaskDTO entityToDto(ToDoTask task) {
        return mapper.map(task, ToDoTaskDTO.class);
    }

}

/*
Компоненты - это классы или объекты,
которые управляются Spring и могут выполнять определенные задачи в приложении.

Что такое бин (Bean)
В контексте Spring для управления зависимостями и инверсии управления (IoC),
термин "бин" (bean) обозначает объект, который управляется контейнером и может быть создан,
настроен и управляем в рамках приложения.
Бин представляет собой компонент, который может быть использован в приложении для выполнения определенных задач.

Контейнер (или контекст) в Spring - это среда,
которая управляет жизненным циклом и зависимостями
бинов (компонентов) в вашем приложении. Он предоставляет средства для создания,
настройки и управления бинами, а также для внедрения зависимостей между ними.

Важные функции контейнера (или контекста) Spring включают в себя:

Создание бинов: Контейнер создает бины и управляет их жизненным циклом.
-Внедрение зависимостей (DI): Контейнер автоматически внедряет зависимости в бины, исходя из их конфигурации.
-Управление жизненным циклом: Контейнер управляет вызовами методов инициализации и уничтожения бинов.
-Конфигурация: Вы можете настроить бины с использованием XML, аннотаций или Java-конфигурации, определяя, как создавать и настраивать бины.
-Обработка событий: Контейнер позволяет регистрировать обработчики событий, связанные с бинами.

Контейнер Spring обеспечивает инверсию управления (IoC)
и внедрение зависимостей (DI), что делает приложение более гибким,
модульным и упрощает тестирование. Вы можете использовать контейнер для создания
и управления всеми компонентами вашего приложения, что облегчает его разработку и обслуживание.
*/
